import express from 'express';
import { matchedData } from 'express-validator';
import config from '../../configs/config';
import MatReceiveService from '../../services/mat/receive.service';
import MatReceiveDetailService from '../../services/mat/receive-detail.service';
import createDatabaseError from '../../utils/createDatabaseError';
import createUnknownError from '../../utils/createUnknownError';
import { sequelizes } from '../../utils/getSequelize';
import isServiceResult from '../../utils/isServiceResult';
import response from '../../utils/response_new';
import createApiResult from '../../utils/createApiResult_new';
import { successState } from '../../states/common.state';
import ApiResult from '../../interfaces/common/api-result.interface';
import AdmPatternHistoryService from '../../services/adm/pattern-history.service';
import AdmPatternOptService from '../../services/adm/pattern-opt.service';
import MatIncomeService from '../../services/mat/income.service';
import StdStoreService from '../../services/std/store.service';
import InvStoreService from '../../services/inv/store.service';

class MatReceiveCtl {
  stateTag: string

  //#region ‚úÖ Constructor
  constructor() {
    this.stateTag = 'matReceive'
  };
  //#endregion

  //#region ‚úÖ CRUD Functions

  //#region üü¢ Create Functions

  // üìí Fn[create] (‚úÖ Inheritance): Default Create Function
  public create = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      let result: ApiResult<any> = { count:0, raws: [] };
      const service = new MatReceiveService(req.tenant.uuid);
      const detailService = new MatReceiveDetailService(req.tenant.uuid);
      const incomeService = new MatIncomeService(req.tenant.uuid);
      const storeService = new StdStoreService(req.tenant.uuid);
      const inventoryService = new InvStoreService(req.tenant.uuid);
      const patternOptService = new AdmPatternOptService(req.tenant.uuid);
      const patternService = new AdmPatternHistoryService(req.tenant.uuid);

      const matched = matchedData(req, { locations: [ 'body' ] });
      const data = {
        header: (await service.convertFk(matched.header))[0],
        details: await detailService.convertFk(matched.details),
      }

      await sequelizes[req.tenant.uuid].transaction(async(tran: any) => { 
        let receiveUuid: string;
        let receiveId: number;
        let regDate: string;
        let maxSeq: number;
        let headerResult: ApiResult<any> = { count: 0, raws: [] };

        // üìå ÏûêÏû¨ÏûÖÌïòÏùò UUIDÍ∞Ä ÏûÖÎ†•ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÏûêÏû¨ÏûÖÌïò Ïã†Í∑ú Î∞úÌñâ
        if (!data.header.uuid) {
          // üìå Ï†ÑÌëúÏûêÎèôÎ∞úÌñâ ÏòµÏÖò Ïó¨Î∂Ä ÌôïÏù∏
          const hasAutoOption = await patternOptService.hasAutoOption({ table_nm: 'MAT_RECEIVE_TB', col_nm: 'stmt_no', tran });

          // üìå Ï†ÑÌëúÏùò ÏûêÎèôÎ∞úÌñâÏòµÏÖòÏù¥ OnÏù∏ Í≤ΩÏö∞
          if (hasAutoOption) {
            data.header.stmt_no = await patternService.getPattern({
              factory_id: data.header.factory_id,
              table_nm: 'MAT_RECEIVE_TB',
              col_nm: 'stmt_no',
              reg_date: data.header.reg_date,
              uid: req.user?.uid as number,
              tran: tran
            });
          }

          // üìå Ï†ÑÌëú ÏÉùÏÑ±
          headerResult = await service.create([data.header], req.user?.uid as number, tran);
          receiveUuid = headerResult.raws[0].uuid;
          receiveId = headerResult.raws[0].receive_id;
          regDate = headerResult.raws[0].reg_date;
          maxSeq = 0;
        } else {
          receiveUuid = data.header.uuid;
          receiveId = data.header.receive_id;
          regDate = data.header.reg_date;

          // üìå Max Seq Í≥ÑÏÇ∞
          maxSeq = await detailService.getMaxSeq(receiveId, tran) as number;
        }

        // üìå ÏÉùÏÑ±Îêú ÏûÖÌïòID ÏûÖÎ†• Î∞è Max Seq Í∏∞Ï§Ä Seq Î∞úÌñâ
        data.details = data.details.map((detail: any) => {
          detail.receive_id = receiveId;
          detail.seq = ++maxSeq;
          return detail;
        });
      
        // üìå ÏûêÏû¨ÏûÖÌïòÏÉÅÏÑ∏ Îì±Î°ù Î∞è Ìï©Í≥ÑÍ∏àÏï° Í≥ÑÏÇ∞
        let detailResult = await detailService.create(data.details, req.user?.uid as number, tran);
        detailResult = await detailService.updateTotalPrice(detailResult.raws, req.user?.uid as number, tran);

        // üìå ÏûêÏû¨ÏûÖÌïòÏùò Ìï©Í≥ÑÏàòÎüâ Î∞è Ìï©Í≥ÑÍ∏àÏï° Í≥ÑÏÇ∞
        headerResult = await service.updateTotal(receiveId, receiveUuid, req.user?.uid as number, tran);

        // üìå ÏàòÏûÖÍ≤ÄÏÇ¨ ÎØ∏ÏßÑÌñâ Ìï≠Î™©(Î¨¥Í≤ÄÏÇ¨ Ìï≠Î™©) ÏàòÎ∂àÎç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        const datasForInventory = detailResult.raws.filter(raw => !raw.insp_fg);

        // üìå ÏûêÏû¨ÏûÖÍ≥† Î∞è ÏàòÎ∂à Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        const incomeBody = await incomeService.getIncomeBody(datasForInventory, regDate);
        await storeService.validateStoreTypeByIds(incomeBody.map(body => body.to_store_id), 'AVAILABLE', tran);
        const incomeResult = await incomeService.create(incomeBody, req.user?.uid as number, tran);
        const storeResult = await inventoryService.transactInventory(
          incomeResult.raws, 'CREATE', 
          { inout: 'TO', tran_type: 'MAT_INCOME', reg_date: regDate, tran_id_alias: 'income_id' },
          req.user?.uid as number, tran
        );

        result.raws = [{
          header: headerResult.raws[0],
          details: detailResult.raws,
          income: incomeResult.raws,
          store: storeResult.raws
        }];
        result.count = headerResult.count + detailResult.count + incomeResult.count + storeResult.count;
      });

      return createApiResult(res, result, 201, 'Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏÑ±Í≥µ', this.stateTag, successState.CREATE);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }

      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };

  //#endregion

  //#region üîµ Read Functions

  // üìí Fn[read] (‚úÖ Inheritance): Default Read Function
  public read = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      let result: ApiResult<any> = { count:0, raws: [] };
      const service = new MatReceiveService(req.tenant.uuid);
      const params = matchedData(req, { locations: [ 'query', 'params' ] });

      result = await service.read(params);

      return createApiResult(res, result, 200, 'Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ', this.stateTag, successState.READ);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }
      
      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };

  // üìí Fn[readByUuid] (‚úÖ Inheritance): Default ReadByUuid Function
  public readByUuid = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      let result: ApiResult<any> = { count:0, raws: [] };
      const service = new MatReceiveService(req.tenant.uuid);

      result = await service.readByUuid(req.params.uuid);

      return createApiResult(res, result, 200, 'Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ', this.stateTag, successState.READ);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }

      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };

  // üìí Fn[readIncludeDetails]: ÏûêÏû¨ÏûÖÌïò Îç∞Ïù¥ÌÑ∞Ïùò Header + Detail Ìï®Íªò Ï°∞Ìöå
  public readIncludeDetails = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      let result: ApiResult<any> = { count: 0, raws: [] };
      const params = matchedData(req, { locations: [ 'query', 'params' ] });
      const service = new MatReceiveService(req.tenant.uuid);
      const detailService = new MatReceiveDetailService(req.tenant.uuid);
      
      const headerResult = await service.readByUuid(params.uuid);
      const detailsResult = await detailService.read({ ...params, receive_uuid: params.uuid });

      result.raws = [{ 
        header: headerResult.raws[0] ?? {}, 
        details: detailsResult.raws 
      }];
      result.count = headerResult.count + detailsResult.count;
      
      return createApiResult(res, result, 200, 'Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ', this.stateTag, successState.READ);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }

      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };

  // üìí Fn[readDetails]: ÏûêÏû¨ÏûÖÌïò Îç∞Ïù¥ÌÑ∞Ïùò Detail Ï°∞Ìöå
  public readDetails = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      const params = matchedData(req, { locations: [ 'query', 'params' ] });
      const detailService = new MatReceiveDetailService(req.tenant.uuid);
      
      const result = await detailService.read({ ...params, receive_uuid: params.uuid });
      
      return createApiResult(res, result, 200, 'Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ', this.stateTag, successState.READ);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }

      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };

  // üìí Fn[readReport]: ÏûêÏû¨ÏûÖÌïòÌòÑÌô© Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
  public readReport = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      const params = matchedData(req, { locations: [ 'query', 'params' ] });
      const service = new MatReceiveService(req.tenant.uuid);

      const result = await service.readReport(params);
      
      return createApiResult(res, result, 200, 'Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ', this.stateTag, successState.READ);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }

      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };

  // üìí Fn[readLotTracking]: ÏûêÏû¨ÏûÖÌïò Í∏∞Ï§Ä LOT Ï∂îÏ†Å Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
  public readLotTracking = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      const params = matchedData(req, { locations: [ 'query', 'params' ] });
      const service = new MatReceiveService(req.tenant.uuid);

      const result = await service.readLotTracking(params);
      
      return createApiResult(res, result, 200, 'Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ', this.stateTag, successState.READ);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }

      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };

  //#endregion

  //#region üü° Update Functions

  // üìí Fn[update] (‚úÖ Inheritance): Default Update Function
  public update = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      let result: ApiResult<any> = { count:0, raws: [] };
      const service = new MatReceiveService(req.tenant.uuid);
      const detailService = new MatReceiveDetailService(req.tenant.uuid);
      const incomeService = new MatIncomeService(req.tenant.uuid);
      const storeService = new StdStoreService(req.tenant.uuid);
      const inventoryService = new InvStoreService(req.tenant.uuid);

      const matched = matchedData(req, { locations: [ 'body' ] });
      const data = {
        header: (await service.convertFk(matched.header))[0],
        details: await detailService.convertFk(matched.details),
      }

      await sequelizes[req.tenant.uuid].transaction(async(tran: any) => { 
        // üìå ÏàòÏûÖÍ≤ÄÏÇ¨ Ïù¥Î†•Ïù¥ ÏûàÏùÑ Í≤ΩÏö∞ Interlock
        await detailService.validateHasInspResultByUuids(data.details.map((detail: any) => detail.uuid));

        // üìå ÏûêÏû¨ÏûÖÌïò ÏàòÏ†ï
        let headerResult = await service.update([data.header], req.user?.uid as number, tran);

        // üìå ÏûêÏû¨ÏûÖÌïòÏÉÅÏÑ∏ ÏàòÏ†ï Î∞è Ìï©Í≥ÑÍ∏àÏï° Í≥ÑÏÇ∞
        let detailResult = await detailService.update(data.details, req.user?.uid as number, tran);
        detailResult = await detailService.updateTotalPrice(detailResult.raws, req.user?.uid as number, tran);

        // üìå ÏûêÏû¨ÏûÖÌïòÏùò Ìï©Í≥ÑÏàòÎüâ Î∞è Ìï©Í≥ÑÍ∏àÏï° Í≥ÑÏÇ∞
        const receiveId = headerResult.raws[0].receive_id;
        const receiveUuid = headerResult.raws[0].uuid;
        const regDate = headerResult.raws[0].reg_date;
        headerResult = await service.updateTotal(receiveId, receiveUuid, req.user?.uid as number, tran);

        // üìå ÏûêÏû¨ÏûÖÍ≥† Î∞è ÏàòÎ∂à Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÌõÑ Ïû¨ ÏÉùÏÑ±
        // üìå ÏûêÏû¨ÏûÖÍ≥† Î∞è ÏàòÎ∂à Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        const receiveDetailIds = data.details.map((detail: any) => detail.receive_detail_id);
        const deletedIncome = await incomeService.deleteByReceiveDetailIds(receiveDetailIds, req.user?.uid as number, tran);
        await inventoryService.transactInventory(
          deletedIncome.raws, 'DELETE', 
          { inout: 'TO', tran_type: 'MAT_INCOME', reg_date: '', tran_id_alias: 'income_id' },
          req.user?.uid as number, tran
        );

        // üìå ÏûêÏû¨ÏûÖÍ≥† Î∞è ÏàòÎ∂à Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        const incomeBody = await incomeService.getIncomeBody(detailResult.raws, regDate);
        await storeService.validateStoreTypeByIds(incomeBody.map(body => body.to_store_id), 'AVAILABLE', tran);
        const incomeResult = await incomeService.create(incomeBody, req.user?.uid as number, tran);
        const storeResult = await inventoryService.transactInventory(
          incomeResult.raws, 'CREATE', 
          { inout: 'TO', tran_type: 'MAT_INCOME', reg_date: regDate, tran_id_alias: 'income_id' },
          req.user?.uid as number, tran
        );

        result.raws = [{
          header: headerResult.raws[0],
          details: detailResult.raws,
          income: incomeResult.raws,
          store: storeResult.raws
        }];
        result.count = headerResult.count + detailResult.count + incomeResult.count + storeResult.count;
      });

      return createApiResult(res, result, 200, 'Îç∞Ïù¥ÌÑ∞ ÏàòÏ†ï ÏÑ±Í≥µ', this.stateTag, successState.UPDATE);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }

      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };

  //#endregion

  //#region üü† Patch Functions

  // üìí Fn[patch] (‚úÖ Inheritance): Default Patch Function
  public patch = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      let result: ApiResult<any> = { count:0, raws: [] };
      const service = new MatReceiveService(req.tenant.uuid);
      const detailService = new MatReceiveDetailService(req.tenant.uuid);
      const incomeService = new MatIncomeService(req.tenant.uuid);
      const storeService = new StdStoreService(req.tenant.uuid);
      const inventoryService = new InvStoreService(req.tenant.uuid);

      const matched = matchedData(req, { locations: [ 'body' ] });
      const data = {
        header: (await service.convertFk(matched.header))[0],
        details: await detailService.convertFk(matched.details),
      }

      await sequelizes[req.tenant.uuid].transaction(async(tran: any) => { 
        // üìå ÏàòÏûÖÍ≤ÄÏÇ¨ Ïù¥Î†•Ïù¥ ÏûàÏùÑ Í≤ΩÏö∞ Interlock
        await detailService.validateHasInspResultByUuids(data.details.map((detail: any) => detail.uuid));

        // üìå ÏûêÏû¨ÏûÖÌïò ÏàòÏ†ï
        let headerResult = await service.patch([data.header], req.user?.uid as number, tran);

        // üìå ÏûêÏû¨ÏûÖÌïòÏÉÅÏÑ∏ ÏàòÏ†ï Î∞è Ìï©Í≥ÑÍ∏àÏï° Í≥ÑÏÇ∞
        let detailResult = await detailService.patch(data.details, req.user?.uid as number, tran);
        detailResult = await detailService.updateTotalPrice(detailResult.raws, req.user?.uid as number, tran);

        // üìå ÏûêÏû¨ÏûÖÌïòÏùò Ìï©Í≥ÑÏàòÎüâ Î∞è Ìï©Í≥ÑÍ∏àÏï° Í≥ÑÏÇ∞
        const receiveId = headerResult.raws[0].receive_id;
        const receiveUuid = headerResult.raws[0].uuid;
        const regDate = headerResult.raws[0].reg_date;
        headerResult = await service.updateTotal(receiveId, receiveUuid, req.user?.uid as number, tran);

        // üìå ÏûêÏû¨ÏûÖÍ≥† Î∞è ÏàòÎ∂à Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÌõÑ Ïû¨ ÏÉùÏÑ±
        // üìå ÏûêÏû¨ÏûÖÍ≥† Î∞è ÏàòÎ∂à Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        const receiveDetailIds = data.details.map((detail: any) => detail.receive_detail_id);
        const deletedIncome = await incomeService.deleteByReceiveDetailIds(receiveDetailIds, req.user?.uid as number, tran);
        await inventoryService.transactInventory(
          deletedIncome.raws, 'DELETE', 
          { inout: 'TO', tran_type: 'MAT_INCOME', reg_date: '', tran_id_alias: 'income_id' },
          req.user?.uid as number, tran
        );

        // üìå ÏûêÏû¨ÏûÖÍ≥† Î∞è ÏàòÎ∂à Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        const incomeBody = await incomeService.getIncomeBody(detailResult.raws, regDate);
        await storeService.validateStoreTypeByIds(incomeBody.map(body => body.to_store_id), 'AVAILABLE', tran);
        const incomeResult = await incomeService.create(incomeBody, req.user?.uid as number, tran);
        const storeResult = await inventoryService.transactInventory(
          incomeResult.raws, 'CREATE', 
          { inout: 'TO', tran_type: 'MAT_INCOME', reg_date: regDate, tran_id_alias: 'income_id' },
          req.user?.uid as number, tran
        );

        result.raws = [{
          header: headerResult.raws[0],
          details: detailResult.raws,
          income: incomeResult.raws,
          store: storeResult.raws
        }];
        result.count = headerResult.count + detailResult.count + incomeResult.count + storeResult.count;
      });

      return createApiResult(res, result, 200, 'Îç∞Ïù¥ÌÑ∞ ÏàòÏ†ï ÏÑ±Í≥µ', this.stateTag, successState.UPDATE);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }

      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };
  //#endregion

  //#region üî¥ Delete Functions

  // üìí Fn[delete] (‚úÖ Inheritance): Default Delete Function
  public delete = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      let result: ApiResult<any> = { count:0, raws: [] };
      const service = new MatReceiveService(req.tenant.uuid);
      const detailService = new MatReceiveDetailService(req.tenant.uuid);
      const incomeService = new MatIncomeService(req.tenant.uuid);
      const inventoryService = new InvStoreService(req.tenant.uuid);
      
      const matched = matchedData(req, { locations: [ 'body' ] });
      const data = {
        header: (await service.convertFk(matched.header))[0],
        details: await detailService.convertFk(matched.details),
      }

      await sequelizes[req.tenant.uuid].transaction(async(tran: any) => { 
        // üìå ÏàòÏûÖÍ≤ÄÏÇ¨ Ïù¥Î†•Ïù¥ ÏûàÏùÑ Í≤ΩÏö∞ Interlock
        await detailService.validateHasInspResultByUuids(data.details.map((detail: any) => detail.uuid));

        // üìå ÏûêÏû¨ÏûÖÍ≥† Î∞è ÏàòÎ∂à Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        const receiveDetailIds = data.details.map((detail: any) => detail.receive_detail_id);
        const incomeResult = await incomeService.deleteByReceiveDetailIds(receiveDetailIds, req.user?.uid as number, tran);
        const storeResult = await inventoryService.transactInventory(
          incomeResult.raws, 'DELETE', 
          { inout: 'TO', tran_type: 'MAT_INCOME', reg_date: '', tran_id_alias: 'income_id' },
          req.user?.uid as number, tran
        );

        // üìå ÏûêÏû¨ÏûÖÌïòÏÉÅÏÑ∏ ÏÇ≠Ï†ú
        const detailResult = await detailService.delete(data.details, req.user?.uid as number, tran);

        // üìå Ï†ÑÌëú ÎÇ¥ ÏÉÅÏÑ∏Ï†ÑÌëú Îç∞Ïù¥ÌÑ∞ Í∞úÏàò Ï°∞Ìöå
        //    ÏÉÅÏÑ∏Ï†ÑÌëúÍ∞úÏàòÍ∞Ä 0Í∞úÏùº Í≤ΩÏö∞ (Ï†ÑÌëúÎç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú)
        //    ÏÉÅÏÑ∏Ï†ÑÌëúÍ∞úÏàòÍ∞Ä 1Í∞ú Ïù¥ÏÉÅÏùº Í≤ΩÏö∞ (Ï†ÑÌëúÎç∞Ïù¥ÌÑ∞ Ìï©Í≥Ñ Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞)
        const count = await detailService.getCountInHeader(data.header.receive_id, tran);
        let headerResult: ApiResult<any>;
        if (count == 0) {
          headerResult = await service.delete([data.header], req.user?.uid as number, tran);
        } else {
          headerResult = await service.updateTotal(data.header.receive_id, data.header.uuid, req.user?.uid as number, tran);
        }

        result.raws = [{
          header: headerResult.raws[0],
          details: detailResult.raws,
          income: incomeResult.raws,
          store: storeResult.raws
        }];
        result.count = headerResult.count + detailResult.count + incomeResult.count + storeResult.count;
      });

      return createApiResult(res, result, 200, 'Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏÑ±Í≥µ', this.stateTag, successState.DELETE);
    } catch (error) {
      if (isServiceResult(error)) { return response(res, error.result_info, error.log_info); }

      const dbError = createDatabaseError(error, this.stateTag);
      if (dbError) { return response(res, dbError.result_info, dbError.log_info); }

      return config.node_env === 'test' ? createUnknownError(req, res, error) : next(error);
    }
  };

  //#endregion

  //#endregion
}

export default MatReceiveCtl;