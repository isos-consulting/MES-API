---
# Response 메세지 정의 (정상응답, 에러)
#   -> 정상응답 중에서 각 HTTP METHOD 에 해당하는 코드 정리
#   -> 에러 코드도 일반적으로 사용하는 것을 제외하고 우리만 사용하는 코드 정의
#      EX) DB 에러 (종류에 따라 라던지), 토큰 Not Found 에러 등등
# response, schemas, examples 어느 범위 까지 모듈로 빼서 사용할지?
#   -> Error 쪽은 빼서 사용하는게 맞는데 나머지는 어떻게 하는게 좋을지?
# 하나의 API 요청은 Response Schema도 하나여야 하는 개념인 것 같은데 어떻게 생각하시는지?
# sub tag 기능이 없음 (유료버전 Swagger Hub 에는 있는데 무리인 것 같음 너무 비쌈)
#   -> View 이름을 앞에 붙이고 기능을 뒤에 쓰는 방식으로 해서 구분 짓는 방식 생각 중
# 코드 재사용 관련 기능으로 상속(inherit) / 콤보박스 처럼 조건 거는 기능(discriminate) 알아봐야 함
# SECURITY 부분은 아직 알아보지 못했음 추후에 더 알아봐야 함

# 일단 비슷한 API 요청이 여러개인 경우 path parameter로 받고 API 명세에는 구분해서 넣는 방식으로 (나중에 합치고)

openapi: "3.0.2"
info:
  title: MES API Document
  version: "1.0.0"
  license:
    name: "MIT"
    url: "https://spdx.org/licenses/MIT.html"
  contact:
    name: "KISOS"
    url: "https://www.kisos.net"
    email: "kisos@kisos.net"
servers:
  - url: https://isos.iptime.org:13221
    description: MES TEST SERVER

components:
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets

paths:
  # ✅ BomType (BOM 구성 유형)
  /adm/bom-type/{uuid}:
    $ref: ../end-points/adm/bom-type.{uuid}.yaml
  /adm/bom-types:
    $ref: ../end-points/adm/bom-types.yaml

  # ✅ InspType (검사 유형)
  /adm/insp-type/{uuid}:
    $ref: ../end-points/adm/insp-type.{uuid}.yaml
  /adm/insp-types:
    $ref: ../end-points/adm/insp-types.yaml

  # ✅ InspHandlingType (검사처리 유형)
  /adm/insp-handling-type/{uuid}:
    $ref: ../end-points/adm/insp-handling-type.{uuid}.yaml
  /adm/insp-handling-types:
    $ref: ../end-points/adm/insp-handling-types.yaml

  # ✅ PrdPlanType (생산계획 유형)
  /adm/prd-plan-type/{uuid}:
    $ref: ../end-points/adm/prd-plan-type.{uuid}.yaml
  /adm/prd-plan-types:
    $ref: ../end-points/adm/prd-plan-types.yaml

  # ✅ InspDetailType (세부검사 유형)
  /adm/insp-detail-type/{uuid}:
    $ref: ../end-points/adm/insp-detail-type.{uuid}.yaml
  /adm/insp-detail-types:
    $ref: ../end-points/adm/insp-detail-types.yaml

  # ✅ Transaction (수불 유형)
  /adm/transaction/{uuid}:
    $ref: ../end-points/adm/transaction.{uuid}.yaml
  /adm/transactions:
    $ref: ../end-points/adm/transactions.yaml

  # ✅ DemandType (요청 유형)
  /adm/demand-type/{uuid}:
    $ref: ../end-points/adm/demand-type.{uuid}.yaml
  /adm/demand-types:
    $ref: ../end-points/adm/demand-types.yaml

  # ✅ DailyInspCycle (일상점검주기)
  /adm/daily-insp-cycle/{uuid}:
    $ref: ../end-points/adm/daily-insp-cycle.{uuid}.yaml
  /adm/daily-insp-cycles:
    $ref: ../end-points/adm/daily-insp-cycles.yaml

  # ✅ PatternOpt (자동번호발행 옵션)
  /adm/pattern-opt/{uuid}:
    $ref: ../end-points/adm/pattern-opt.{uuid}.yaml
  /adm/pattern-opts:
    $ref: ../end-points/adm/pattern-opts.yaml

  # ✅ ReworkType (재작업 유형)
  /adm/rework-type/{uuid}:
    $ref: ../end-points/adm/rework-type.{uuid}.yaml
  /adm/rework-types:
    $ref: ../end-points/adm/rework-types.yaml

  # ✅ CycleUnit (주기 단위)
  /adm/cycle-unit/{uuid}:
    $ref: ../end-points/adm/cycle-unit.{uuid}.yaml
  /adm/cycle-units:
    $ref: ../end-points/adm/cycle-units.yaml

  # ✅ StoreType (창고 유형)
  /adm/store-type/{uuid}:
    $ref: ../end-points/adm/store-type.{uuid}.yaml
  /adm/store-types:
    $ref: ../end-points/adm/store-types.yaml

  # ✅ FileMgmt (파일관리)
  /adm/file-mgmt/{uuid}:
    $ref: ../end-points/adm/file-mgmt.{uuid}.yaml
  /adm/file-mgmts:
    $ref: ../end-points/adm/file-mgmts.yaml

  # ✅ FileMgmtType (파일관리유형)
  /adm/file-mgmt-type/{uuid}:
    $ref: ../end-points/adm/file-mgmt-type.{uuid}.yaml
  /adm/file-mgmt-types:
    $ref: ../end-points/adm/file-mgmt-types.yaml

  # ✅ CompanyOpt (회사 옵션)
  /adm/company-opt/{uuid}:
    $ref: ../end-points/adm/company-opt.{uuid}.yaml
  /adm/company-opts:
    $ref: ../end-points/adm/company-opts.yaml
